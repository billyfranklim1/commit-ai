#!/usr/bin/env python3
import openai
import os
import click
from rich import print
from rich.console import Console
import json
import questionary
import subprocess

console = Console()

openai_api_key = os.getenv('OPENAI_API_KEY')

def check_openai_api_key():
    if openai_api_key is None:
        console.print("[red]OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.[/red]")
        console.print("[yellow]Edit your .bashrc or .zshrc file and add the following line:[/yellow]")
        console.print("[yellow]export OPENAI_API_KEY=your-api-key[/yellow]")
        raise SystemExit(1)
    openai.api_key = openai_api_key

def get_git_diff():
    try:
        result = subprocess.run(['git', 'diff', '--cached'], capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        console.print(f"[red]Error executing git diff: {e}[/red]")
        raise SystemExit(1)

def generate_commit_messages(diff, suggestion=None):
    system_prompt = """
    You are a developer working on a project. You have made some changes to the code and you want to commit them.
    Commit messages should follow these guidelines:

    1. **Format**: The message format should be: <type>[scope]: <description>. Optionally, a body can be included.
    2. **Types and Emojis**: Incorporate the following emojis for types:
    - ‚ú® feat: Introduce new features.
    - üêõ fix: Fix issues or bugs.
    - üìö docs: Update documentation.
    - üß™ test: Modify or add tests.
    - üèóÔ∏è build: Modify build files or dependencies.
    - ‚ö° perf: Improve performance.
    - üíÖ style: Adjust code formatting and style.
    - ‚ôªÔ∏è refactor: Refactor code without changing functionality.
    - üöÄ chore: Update routine tasks and configs.
    - üîÑ ci: Adjust continuous integration.
    - üóÇÔ∏è raw: Modify configuration or data files.
    3. **Examples**:
    - üêõ fix(authentication): add password regex pattern
    - ‚ú® feat(storage): add new test cases
    4. **Body**: If a body is included, it should:
    - Be a single brief paragraph, not a list of bullets or multiple commits.
    - Explain the context and the change without being verbose or listing changes.
    5. **Motivation**: Include the motivation behind the commit only if provided by the user as additional information. If not provided, do not include it in the commit message.
    6. **No Markdown**: Do not format your response as markdown.
    7. **Revisions**: The user may ask for revisions or provide more specific instructions.

    Return exactly as the example JSON:

    {
    "commit_messages": [
        {
        "type": "‚ú® feat",
        "scope": "greeting",
        "description": "update welcome message to 'Hello OpenAI'"
        },
        {
        "type": "üìö docs",
        "scope": "readme",
        "description": "update example greeting in documentation"
        },
        {
        "type": "üêõ fix",
        "scope": "greeting",
        "description": "correct typo in greeting message"
        }
    ]
    }
    """

    prompt_text = f"suggest 3 commit messages based on the following diff:\n\n{diff}\n\n"
    if suggestion:
        prompt_text += f"Suggestion for improvement: {suggestion}\n\n"
        
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt_text},
            ],
            response_format={ "type": "json_object" },
        )
        return json.loads(response.choices[0].message.content)['commit_messages']
    except openai.error.OpenAIError as e:
        console.print(f"[red]Error with OpenAI API: {e}[/red]")
        raise SystemExit(1)

@click.command()
def main():
    check_openai_api_key()
    
    while True:
        diff = get_git_diff()

        if not diff:
            console.print("[red]No changes to commit. Execute 'git add' to stage changes.[/red]")
            raise SystemExit(1)

        suggestion = questionary.text("Add an optional suggestion for improvement (or press Enter to skip):").ask()

        with console.status("[bold green]Generating commit messages...[/bold green]", spinner="dots"):
            commit_messages = generate_commit_messages(diff, suggestion)

        options = [
            f"{message['type']}({message['scope']}): {message['description']}"
            for message in commit_messages
        ]

        selected_option = questionary.select(
            "Choose the commit message:",
            choices=options
        ).ask()

        if selected_option is None:
            console.print("[yellow]Quitting...[/yellow]")
            break

        final_commit_message = questionary.text("Edit the commit message if needed:", default=selected_option).ask()

        console.print(f'[yellow]Final commit message: "{final_commit_message}"[/yellow]')
        os.system(f'git commit -m "{final_commit_message}"')
        break

if __name__ == "__main__":
    main()
