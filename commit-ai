#!/usr/bin/env python3
import openai
import sys
import os
from prompt_toolkit import prompt
from termcolor import colored
import re
import json

openai_api_key = os.getenv('OPENAI_API_KEY')

if openai_api_key is None:
    print(colored("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.", "red"))
    print(colored("Edit your .bashrc or .zshrc file and add the following line:", "yellow"))
    print(colored("export OPENAI_API=your-api-key", "yellow"))
    sys.exit(1)

openai.api_key = openai_api_key

def get_git_diff():
    diff_command = 'git diff --cached'
    return os.popen(diff_command).read()
def generate_commit_messages(diff, suggestion=None):
    # Definir o prompt do sistema com as instru√ß√µes de commit
    system_prompt = """
    You are a developer working on a project. You have made some changes to the code and you want to commit them.
    Commit messages should:
    - Follow conventional commits.
    - The message format should be: <type>[scope]: <description>.
    - Incorporate the following emojis for types:
      ‚ú® feat - Introduzir novos recursos.
      üêõ fix - Corrigir problemas ou bugs.
      üìö docs - Atualizar documenta√ß√£o.
      üß™ test - Alterar ou adicionar testes.
      üèóÔ∏è build - Modificar arquivos de build ou depend√™ncias.
      ‚ö° perf - Melhorar performance.
      üíÖ style - Ajustar formata√ß√£o e estilo do c√≥digo.
      ‚ôªÔ∏è refactor - Refatorar c√≥digo sem alterar funcionalidade.
      üöÄ chore - Atualizar tarefas rotineiras e configs.
      üîÑ ci - Ajustes em integra√ß√£o cont√≠nua.
      üóÇÔ∏è raw - Modificar arquivos de configura√ß√µes ou dados.
    Examples:
      - üêõ fix(authentication): add password regex pattern
      - ‚ú® feat(storage): add new test cases
    The response should be a JSON array with the suggested commit messages. Retorne exatamente conforme o json de exemplo.
    """

    # Definir o prompt do usu√°rio com o diff e sugest√µes
    prompt_text = f"suggest 3 commit messages based on the following diff:\n\n{diff}\n\n"
    if suggestion:
        prompt_text += f"Suggestion for improvement: {suggestion}\n\n"

    # Enviar a solicita√ß√£o para a API do OpenAI
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": "diff --git a/file.txt b/file.txt\nindex 83db48d..b5d73a3 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1 @@\n-Hello World\n+Hello OpenAI"},
            {"role": "assistant", "content": '{"commit_messages" :[ {"type": "‚ú® feat", "scope": "greeting", "description": "update welcome message to \'Hello OpenAI\'"}, {"type": "üìö docs", "scope": "readme", "description": "update example greeting in documentation"}, {"type": "üêõ fix", "scope": "greeting", "description": "correct typo in greeting message"}]}'},
            {"role": "user", "content": prompt_text},
        ],
        response_format={ "type": "json_object" },
    )

    return json.loads(response.choices[0].message.content)['commit_messages']

def main():
    try:
        while True:
            diff = get_git_diff()

            if not diff:
                print(colored("No changes to commit. Execute 'git add' to stage changes.", "red"))
                sys.exit(1)
                
            suggestion = input("Add an optional suggestion for improvement (or press Enter to skip): ")

            commit_messages = generate_commit_messages(diff, suggestion)

            print(colored("Suggested commit messages:", "cyan"))

            for i, message in enumerate(commit_messages, start=0):
                print(colored(f"{i+1}: {message['type']}({message['scope']}): {message['description']}", "cyan"))

            selected_option = input("Choose one of the options above (or press 'r' to refresh, 'q' to quit): \n")
            if selected_option.lower() == 'q':
                print(colored("Quitting...", "yellow"))
                break
            elif selected_option.lower() == 'r':
                print(colored("Refreshing commit messages...", "cyan"))
                continue

            selected_option = int(selected_option)
            if selected_option < 1 or selected_option > len(commit_messages):
                print(colored("Invalid option", "red"))
                continue

            commit_message = f"{commit_messages[selected_option-1]['type']}({commit_messages[selected_option-1]['scope']}): {commit_messages[selected_option-1]['description']}"
            final_commit_message = prompt(f"Edit the commit message if needed: ", default=commit_message)

            print(colored(f'Final commit message: "{final_commit_message}"', "yellow"))
            os.system(f'git commit -m "{final_commit_message}"')
            break

    except KeyboardInterrupt:
        print(colored("\nOperation cancelled by user.", "red"))
        sys.exit(1)
    except ValueError:
        print(colored("Please enter a valid number.", "red"))
        main()

if __name__ == "__main__":
    main()

