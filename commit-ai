#!/usr/bin/env python3
import openai
import os
import click
from rich import print
from rich.console import Console
from rich.spinner import Spinner
import json
import questionary

console = Console()

openai_api_key = os.getenv('OPENAI_API_KEY')

if openai_api_key is None:
    console.print("[red]OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.[/red]")
    console.print("[yellow]Edit your .bashrc or .zshrc file and add the following line:[/yellow]")
    console.print("[yellow]export OPENAI_API_KEY=your-api-key[/yellow]")
    raise SystemExit(1)

openai.api_key = openai_api_key

def get_git_diff():
    diff_command = 'git diff --cached'
    return os.popen(diff_command).read()

def generate_commit_messages(diff, suggestion=None):
    system_prompt = """
    You are a developer working on a project. You have made some changes to the code and you want to commit them.
    Commit messages should:
    - Follow conventional commits.
    - The message format should be: <type>[scope]: <description>.
    - Incorporate the following emojis for types:
      ✨ feat - Introduzir novos recursos.
      🐛 fix - Corrigir problemas ou bugs.
      📚 docs - Atualizar documentação.
      🧪 test - Alterar ou adicionar testes.
      🏗️ build - Modificar arquivos de build ou dependências.
      ⚡ perf - Melhorar performance.
      💅 style - Ajustar formatação e estilo do código.
      ♻️ refactor - Refatorar código sem alterar funcionalidade.
      🚀 chore - Atualizar tarefas rotineiras e configs.
      🔄 ci - Ajustes em integração contínua.
      🗂️ raw - Modificar arquivos de configurações ou dados.
    Examples:
      - 🐛 fix(authentication): add password regex pattern
      - ✨ feat(storage): add new test cases
    The response should be a JSON array with the suggested commit messages. Retorne exatamente conforme o json de exemplo.
    
    {"commit_messages" :[ {"type": "✨ feat", "scope": "greeting", "description": "update welcome message to \'Hello OpenAI\'"}, {"type": "📚 docs", "scope": "readme", "description": "update example greeting in documentation"}, {"type": "🐛 fix", "scope": "greeting", "description": "correct typo in greeting message"}]}
    """

    prompt_text = f"suggest 3 commit messages based on the following diff:\n\n{diff}\n\n"
    if suggestion:
        prompt_text += f"Suggestion for improvement: {suggestion}\n\n"
        
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt_text},
        ],
        response_format={ "type": "json_object" },
    )

    return json.loads(response.choices[0].message.content)['commit_messages']

@click.command()
def main():
    while True:
        diff = get_git_diff()

        if not diff:
            console.print("[red]No changes to commit. Execute 'git add' to stage changes.[/red]")
            raise SystemExit(1)

        suggestion = questionary.text("Add an optional suggestion for improvement (or press Enter to skip):").ask()

        with console.status("[bold green]Generating commit messages...[/bold green]", spinner="dots"):
            commit_messages = generate_commit_messages(diff, suggestion)

        options = [
            f"{message['type']}({message['scope']}): {message['description']}"
            for message in commit_messages
        ]

        selected_option = questionary.select(
            "Choose the commit message:",
            choices=options
        ).ask()

        if selected_option is None:
            console.print("[yellow]Quitting...[/yellow]")
            break

        final_commit_message = questionary.text("Edit the commit message if needed:", default=selected_option).ask()

        console.print(f'[yellow]Final commit message: "{final_commit_message}"[/yellow]')
        os.system(f'git commit -m "{final_commit_message}"')
        break

if __name__ == "__main__":
    main()